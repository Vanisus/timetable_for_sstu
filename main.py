import asyncio
import os
import time
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import mongo
import parcer

storage = MemoryStorage()


load_dotenv()

telegram_key = os.getenv('TELEGRAM_API_KEY')
ADMIN_ID = os.getenv('TELEGRAM_ADMIN_ID')

bot = Bot(token=telegram_key)
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())


class LinkState(StatesGroup):
    waiting_for_link = State()


@dp.message_handler(commands=['start'])
async def start_bot(message):
    if await mongo.user_exist(message.from_user.id):
        first_mess = f"<b>{message.from_user.first_name}</b>, –ø—Ä–∏–≤–µ—Ç!"
        await bot.send_message(message.chat.id, first_mess, parse_mode='html')
    else:
        markup = types.InlineKeyboardMarkup()
        item = types.InlineKeyboardButton("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É", callback_data="input_link")
        markup.add(item)
        first_mess = f"<b>{message.from_user.first_name}</b>, –ø—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–æ—Å—Ç–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å! –Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –°–ì–¢–£ –∏–º.–ì–∞–≥–∞—Ä–∏–Ω–∞ –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ!\n"
        await bot.send_message(message.chat.id, first_mess, parse_mode='html', reply_markup=markup)


@dp.message_handler(commands=['today'])
async def today_timetable(message):
    screenshotName = f"screenshots/{message.from_user.id}.png"
    day_num = 0
    print(day_num)
    if await parcer.getDayScreenshot(await mongo.get_url(message.from_user.id), day_num, 'day-current', screenshotName):
        await bot.send_photo(message.chat.id, photo=open(screenshotName, 'rb'),
                             caption='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
        await asyncio.sleep(20)
        os.remove(screenshotName)
    else:
        await bot.send_message(message.chat.id, f'–£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å :)')


@dp.message_handler(commands=['tomorrow'])
async def tomorrow_timetable(message):
    day_num = (datetime.now().weekday() + 2) % 7
    print(day_num)
    screenshot_name = f"screenshots/{message.from_user.id}.png"
    if await parcer.getDayScreenshot(await mongo.get_url(message.from_user.id), day_num, 'day', screenshot_name):
        await bot.send_photo(message.chat.id, photo=open(screenshot_name, 'rb'),
                             caption='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
        await asyncio.sleep(20)
        os.remove(screenshot_name)
    else:
        await bot.send_message(message.chat.id, f'–£ –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π, —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å :)')


@dp.message_handler(commands=['current_week'])
async def current_week_timetable(message):
    screenshot_name = f"screenshots/{message.from_user.id}.png"
    await parcer.getWeekScreenshot(await mongo.get_url(message.from_user.id), 0, 'week', screenshot_name)
    await bot.send_photo(message.chat.id, photo=open(screenshot_name, 'rb'),
                         caption='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é')
    time.sleep(20)
    os.remove(screenshot_name)


@dp.message_handler(commands=['next_week'])
async def next_week_timetable(message):
    screenshot_name = f"screenshots/{message.from_user.id}.png"
    await parcer.getWeekScreenshot(await mongo.get_url(message.from_user.id), 1, 'week', screenshot_name)
    await bot.send_photo(message.chat.id, photo=open(screenshot_name, 'rb'),
                         caption='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é')
    time.sleep(5)
    os.remove(screenshot_name)


@dp.message_handler(commands=['schedule'])
async def set_schedule(message):
    await mongo.update_schedule(message.from_user.id)
    if await mongo.is_schedule(message.from_user.id):
        await bot.send_message(message.chat.id, f'–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
    else:
        await bot.send_message(message.chat.id, f'–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ  –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')


@dp.message_handler(commands=['help'])
async def help_message(message):
    await bot.send_message(message.chat.id,
                           f'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –°–ì–¢–£ –∏–º. –ì–∞–≥–∞—Ä–∏–Ω–∞! üöÄ\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ ¬´rasp.sstu¬ª –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\nüìÖ /today - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è \nüîú /tomorrow - —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\nüìÜ /current_week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\nüîç /next_week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n‚è∞ /schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏\nüîÑ /update_link - –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—á–∞—Ç—å —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéìüìö')


@dp.message_handler(commands=['update_link'])
async def update_link(message):
    markup = types.InlineKeyboardMarkup()
    item = types.InlineKeyboardButton("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É", callback_data="input_link")
    markup.add(item)
    update_message = f"<b>{message.from_user.first_name}</b>, –î–∞–≤–∞–π—Ç–µ –ø–æ–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫—É\n"
    await bot.send_message(message.chat.id, update_message, parse_mode='html', reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data and c.data == "input_link")
async def callback_query(call: types.CallbackQuery):
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:")
    await LinkState.waiting_for_link.set()


@dp.message_handler(state=LinkState.waiting_for_link)
async def process_add_user(message: types.Message, state: FSMContext):
    if await mongo.user_exist(message.from_user.id):
        if await mongo.update_url(message.from_user.id, message.text):
            await bot.send_message(message.chat.id, f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
            await state.finish()
        else:
            await bot.send_message(message.chat.id, f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ')
            await state.finish()
    else:
        await mongo.add_one(message.from_user.first_name, message.from_user.id, message.text)
        await bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
        await state.finish()


async def on_startup(dp):
    await bot.send_message(chat_id=ADMIN_ID, text='Bot has been started')


async def on_shutdown(dp):
    await bot.send_message(chat_id=ADMIN_ID, text='Bot has been stopped')


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)
